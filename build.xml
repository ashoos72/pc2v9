<?xml version="1.0"?>
<!-- $Id$ -->
<!-- $HeadURL$ -->
<project name="pc2v9" default="jar" basedir=".">
    <description>
        v9 build file
    </description>
    <!-- set global properties for this build -->
    <property name="src.dir" location="src" />
    <property name="test.dir" location="test" />
    <property name="build.dir" location="build" />
    <property name="data.dir" location="data" />
    <property name="build.prod.dir" location="${build.dir}/prod" />
    <property name="build.test.dir" location="${build.dir}/test" />
    <property name="testresults.dir" location="${build.dir}/test-results" />
    <property name="version.path" value="${build.dir}/VERSION"/>
    <property name="testresults.xml.dir" location="${testresults.dir}/xml" />
    <property name="testresults.html.dir" location="${testresults.dir}/html" />
    <property name="compilelogs.dir" location="${build.dir}" />
    <property name="docs.dir" location="${build.dir}/docs" />
    <property name="docs.api.dir" location="${docs.dir}/api" />
    <property name="dist.dir" location="dist" />
    <!-- this should change one the location of mclb.jar changes -->
    <property name="vendor.lib.dir" location="${basedir}/vendor/lib"/>
    <property name="scripts.dir" location="${basedir}/bin"/>
    <property name="samps.dir" location="${basedir}/samps"/>
    <!-- used in javadocs linkoffline, this is the location on
         the build host, override on the ant commandline -->
    <property name="api.url" location="/software/pc2/java/docs/api/"/>


    <!-- Compiler settings. -->
    <property name="javacFailOnError" value="false"/>
    <property name="javacDebugInfo" value="on"/>
    <property name="javacVerbose" value="false"/>
    <property name="logExtension" value=".log"/>
    <property name="compilerArg" value=""/>
    <property name="javacSource" value="1.5"/>
    <property name="javacTarget" value="1.5"/>
    <path id="path_bootclasspath">
            <fileset dir="${java.home}/lib">
                <include name="*.jar"/>
            </fileset>
    </path>

    <property name="bootclasspath" refid="path_bootclasspath"/>
    <property name="bundleJavacSource" value="${javacSource}"/>
    <property name="bundleJavacTarget" value="${javacTarget}"/>
    <property name="bundleBootClasspath" value="${bootclasspath}"/>

    <property name="name" value="pc2"/>
    <property name="jar.name" value="${name}.jar"/>
    <property name="jar.path" value="${dist.dir}/${jar.name}"/>

    <tstamp>
        <format property="date" pattern="yyyyMMdd" timezone="UTC" />
    </tstamp>
    <tstamp>
        <format property="time" pattern="HHmm" timezone="UTC" />
    </tstamp>
    <property name="timestamp" value="${date}${time}" />
    <tstamp>
        <format
            property="date.english"
            pattern="EEEE, MMMM d yyyy"
            timezone="UTC" />
    </tstamp>
    <tstamp>
        <format
            property="time.english"
            pattern="HH:mm z"
            timezone="UTC" />
    </tstamp>
    <property
        name="timestamp.english"
        value="${date.english} ${time.english}" />

    <!-- version is used in the jar manifest & in package.xml -->
    <property name="version" value="9.1.6"/>

    <path id="project.classpath">
        <pathelement location="${build.prod.dir}"/>
        <pathelement location="${build.test.dir}"/>
        <fileset dir="${vendor.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <taskdef resource="checkstyletask.properties" classpathref="project.classpath"/>

    <target name="properties">
        <available classname="org.eclipse.jdt.core.JDTCompilerAdapter" property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
    </target>

    <target name="init" depends="properties">
        <!-- Create the time stamp -->
        <tstamp />
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.prod.dir}" />
        <mkdir dir="${build.test.dir}" />
        <mkdir dir="${compilelogs.dir}" />
        <exec executable="svnversion" outputproperty="repo.version">
            <arg line="-n ."/>
        </exec>
    </target>

    <target name="compile" depends="init" description="compile the source ">
        <!-- Compile the java code from ${src.dir} into ${build.dir} -->
        <javac srcdir="${src.dir}" destdir="${build.prod.dir}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}">
            <compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
            <classpath refid="project.classpath"/>
            <!-- <compilerarg value="" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/> -->
            <compilerarg line="-log '${compilelogs.dir}/${name}.prod${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        </javac>
    </target>

    <target name="compile-tests" depends="compile" description="compile the junit tests">
        <javac srcdir="${test.dir}" destdir="${build.test.dir}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}">
            <compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
            <classpath refid="project.classpath"/>
        <!-- <compilerarg value="" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/> -->
            <compilerarg line="-log '${compilelogs.dir}/${name}.test${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        </javac>
    </target>
    <target name="test" depends="compile-tests" description="run junit tests">
        <delete dir="${testresults.dir}"/>
        <mkdir dir="${testresults.xml.dir}"/>
        <junit errorProperty="test.failed" failureProperty="test.failed">
                <classpath refid="project.classpath"/>
                <formatter type="brief" usefile="false"/>
                <formatter type="xml"/>
                <batchtest todir="${testresults.xml.dir}">
                    <fileset dir="${build.test.dir}" includes="**/AllTests.class"/>
                </batchtest>
        </junit>
        <!-- remove TEST- from filenames  -->
        <move todir="${testresults.xml.dir}">
            <fileset dir="${testresults.xml.dir}" includes="**/*"/>
            <mapper type="glob" from="TEST-*" to="*"/>
        </move>
        <fail message="Tests failed! Check test reports.">
            <condition>
                <and>
                    <isset property="test.failed"/>
                    <not>
                        <isset property="cruisecontrol"/>
                    </not>
                </and>
            </condition>
        </fail>
    </target>

    <target name="version" depends="init" description="re-creates the VERSION file">
        <delete file="${version.path}"/>
        <echo message="CSUS Programming Contest Control System${line.separator}" file="${version.path}"/>
        <echo message="Version ${version} ${date} ${repo.version} (${timestamp.english})${line.separator}" file="${version.path}" append="true"/>
    </target>
    <target name="jar" depends="test" description="creates a jar of our classes">
        <antcall target="version"/>
        <mkdir dir="${dist.dir}" />

		<!-- include the images in the jar -->
		<copy file="images/csus_logo.png" todir="${build.prod.dir}/images"/>
		<copy file="images/icpc_banner.png" todir="${build.prod.dir}/images"/>

		<!-- consider doing the manifest in a separate target
             then the Version can be ommitted if not set -->
        <jar jarfile="${jar.path}" basedir="${build.prod.dir}">
            <manifest>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Implementation-Title" value="CSUS Programming Contest Control System"/>
                <attribute name="Implementation-Version" value="${repo.version}"/>
                <attribute name="Built-On" value="${timestamp.english}"/>
                <attribute name="Built-On-Date" value="${date}"/>
                <attribute name="Main-Class" value="edu.csus.ecs.pc2.Starter"/>
            </manifest>
        </jar>
    </target>

    <target name="clean" description="clean up">
        <!-- Delete the ${build.dir} and ${dist.dir} directory trees -->
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <target name="checkstyle" description="Generates a report of code convention violations." depends="compile">
        <checkstyle config="${basedir}/.pc2_checks.xml" failureProperty="checkstyle.failure" failOnViolation="false">
            <formatter type="xml" tofile="checkstyle_report.xml" />
            <fileset dir="src" includes="**/*.java" />
            <classpath refid="project.classpath"/>
        </checkstyle>
        <style in="checkstyle_report.xml" out="checkstyle_report.html" style="checkstyle.xsl" />
    </target>

    <!-- run this target as part of automated build -->
    <target name="checkstyle-nightly" depends="checkstyle" if="checkstyle.failure" description="Sends email if checkstyle detected code conventions violations.">
        <mail from="pc2@ecs.csus.edu" tolist="boudreat@gaia.ecs.csus.edu" mailhost="gaia.ecs.csus.edu" subject="Checkstyle violation(s) in project ${ant.project.name}" files="checkstyle_report.html" />
    </target>

    <target name="javadocs-api" description="Creates API javadocs">
        <mkdir dir="${docs.api.dir}" />
    	<javadoc access="protected" additionalparam="-link  http://java.sun.com/j2se/1.5.0/docs/api/" author="true" classpath="vendor/lib/mclb.jar" 
    	destdir="${docs.api.dir}" doctitle="PC&amp;sup2; Version 9 API" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" overview="api_overview.html" packagenames="edu.csus.ecs.pc2.api,edu.csus.ecs.pc2.api.exceptions,edu.csus.ecs.pc2.api.listener" source="1.5" sourcepath="src" splitindex="true" use="true" version="true" useexternalfile="true"/>
    </target>
    <target name="javadocs" description="Creates project javadocs">
        <mkdir dir="${docs.dir}/api-full" />
        <javadoc sourcepath="${src.dir}" destdir="${docs.dir}/api-full" defaultexcludes="yes" packagenames="edu.csus.ecs.pc2.*" doctitle="PC^2 Version 9 Java Documentation" Use="yes" SplitIndex="yes" linkoffline="http://java.sun.com/j2se/1.5.0/docs/api/ ${api.url}" classpathref="project.classpath"/>
    </target>
</project>
